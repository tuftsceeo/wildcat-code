/* CodingTrack.module.css - With Motor Animation */
/* Using design tokens from retro-ui-tokens.css */

.trackContainer {
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100%;
    width: 100%;
    border: 2px solid var(--color-blue);
    border-radius: var(--radius-md);
    background-color: var(--color-black);
    padding: var(--spacing-4);
}

.codeSucker {
    position: absolute;
    top: var(--spacing-4);
    left: var(--spacing-4);
    color: var(--color-blue);
    width: 48px;
    height: 48px;
    opacity: 0.6;
}

.slotDisplay {
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

/* Motor Visualization (from motor-demo.tsx) */
.motorVisualization {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    margin-bottom: var(--spacing-4);
}

.motorAnimation {
    position: relative;
    width: 150px;
    height: 150px;
}

.motorBorder {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

.motorRotor {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

.clockwise {
    animation-name: clockwise;
    animation-timing-function: linear;
    animation-iteration-count: infinite;
}

.counterclockwise {
    animation-name: counterclockwise;
    animation-timing-function: linear;
    animation-iteration-count: infinite;
}

@keyframes clockwise {
    from {
        transform: rotate(0deg);
    }
    to {
        transform: rotate(360deg);
    }
}

@keyframes counterclockwise {
    from {
        transform: rotate(0deg);
    }
    to {
        transform: rotate(-360deg);
    }
}

.motorLabel {
    color: var(--color-neon-green);
    text-align: center;
    text-transform: uppercase;
    font-size: var(--font-size-lg);
    margin-top: var(--spacing-4);
}

/* Multiple motor container */
.multiMotorContainer {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
    gap: var(--spacing-4);
}

/* Smaller motor visualization for multiple motors */
.smallMotorVisualization {
    composes: motorVisualization;
    transform: scale(0.8);
}

.xsMotorVisualization {
    composes: motorVisualization;
    transform: scale(0.6);
}

/* Timer visualization */
.timerVisualization {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    margin-bottom: var(--spacing-8);
}

.timerIcon {
    font-size: 48px;
    color: var(--color-blue);
    margin-bottom: var(--spacing-2);
}

.timerLabel {
    color: var(--color-blue);
    text-transform: uppercase;
    font-size: var(--font-size-lg);
    margin-top: var(--spacing-2);
}

.timerValue {
    font-size: 48px;
    color: var(--color-yellow);
    margin: var(--spacing-2) 0;
}

.timerUnit {
    font-size: var(--font-size-sm);
    color: var(--color-yellow);
    text-transform: uppercase;
}

/* Test button at bottom as in FIGMA */
.testButton {
    background-color: #00bfff;
    border: none;
    border-radius: var(--radius-md);
    color: black;
    font-family: var(--font-family-primary);
    font-size: var(--font-size-base);
    font-weight: var(--font-weight-bold);
    padding: var(--spacing-2) var(--spacing-6);
    cursor: pointer;
    text-transform: uppercase;
    position: absolute; /* Position it absolutely */
    bottom: calc(
        var(--spacing-4) + 40px
    ); /* Position it above the next button with some gap */
    width: 100px; /* Match Play button width */
    z-index: 2; /* Ensure it's above other elements */
}

.testButton:hover {
    opacity: 0.9;
}

/* Navigation controls with CSS triangles instead of SVGs */
.navigationControls {
    position: absolute;
    width: 100%;
    height: 100%;
    pointer-events: none; /* Allow clicks to pass through to underlying elements */
}

.navButton {
    background-color: transparent;
    border: none;
    cursor: pointer;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all var(--transition-normal);
    position: absolute;
    pointer-events: auto; /* Re-enable clicks on the buttons */
}

.prevButton {
    top: var(--spacing-4);
    left: 50%;
    transform: translateX(-50%);
}

.nextButton {
    bottom: var(--spacing-4);
    left: 50%;
    transform: translateX(-50%);
}

.navButton:hover:not(:disabled) {
    transform: translateX(-50%) scale(1.1);
}

.navButton:disabled {
    opacity: 0.3;
    cursor: not-allowed;
}

/* Previous button triangle */
.prevButton:before {
    content: "";
    display: block;
    width: 0;
    height: 0;
    border-top: 10px solid transparent;
    border-bottom: 10px solid transparent;
    border-right: 15px solid var(--color-white);
}

.prevButton:disabled:before {
    border-right-color: var(--color-gray-500);
}

/* Next button triangle */
.nextButton:before {
    content: "";
    display: block;
    width: 0;
    height: 0;
    border-top: 10px solid transparent;
    border-bottom: 10px solid transparent;
    border-left: 15px solid var(--color-white);
}

.nextButton:disabled:before {
    border-left-color: var(--color-gray-500);
}

/* Glow effect when hovering */
.navButton:not(:disabled):hover:before {
    filter: drop-shadow(0 0 3px var(--color-neon-green));
}

/* Slot description (hidden/removed as requested) */
.slotDescription {
    display: none;
}

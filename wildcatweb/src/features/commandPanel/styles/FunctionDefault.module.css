/* FunctionDefault.module.css - Refactored with design tokens */

.hubTopBackground {
    position: relative;
    flex: 1 1 auto;
    display: flex;
    flex-direction: column;
    overflow-y: auto;
    overflow-y: hidden;
    /* border: var(--border-width-standard) solid var(--panel-border);
    border-radius: var(--radius-md); */
    background-color: var(--panel-bg);
    /* padding: var(--spacing-4); */
    /* overflow: visible; */
}

.outline {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    z-index: 0;
    opacity: 0.1;
    pointer-events: none;
}

.functionHubText {
    text-align: center;
    margin-bottom: var(--spacing-6);
    text-transform: uppercase;
    letter-spacing: var(--letter-spacing-wider);
    font-size: var(--font-size-lg);
    color: var(--color-text);
    position: relative;
    z-index: 1;
}

/* ACTION/SENSE buttons side by side like in FIGMA */
.actionSenseButtonGroup {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: var(--spacing-4);
    margin-bottom: 0; /* Remove margin from group */
    position: relative;
    z-index: 1;
    width: 100%;
    padding: 8px;
}

.actionButton,
.senseButton {
    flex: 1;
    position: relative;
    padding: 0; /* Remove padding from button containers */
}

/* Base button style */
.actionButtonChild {
    width: 100%;
    background-color: var(--button-default-bg);
    border: var(--border-width-standard) solid var(--button-default-border);
    border-radius: var(--radius-md);
    color: var(--button-default-text);
    font-family: var(--font-family-active);
    font-size: var(--font-size-base);
    padding: var(--spacing-3);
    cursor: pointer;
    text-transform: uppercase;
    transition: all var(--transition-normal);
    transform: var(--button-scale-default);
    transform-origin: center;
}

/* Active state for buttons */
.actionButtonChild.active {
    border-color: var(--button-selected-border);
    color: var(--button-selected-text);
    background-color: var(--button-selected-bg);
    box-shadow: var(--glow-secondary);
}

.actionButtonChild:hover:not(.active) {
    transform: var(--button-scale-hover);
}

.actionButtonChild:active:not(.active) {
    transform: var(--button-scale-active);
}

/* Remove the "or" text */
.orText {
    display: none;
}

/* ------- LAYOUT STRUCTURE ------- */

/* Main container for content area */
.contentContainer {
    display: flex;
    flex-direction: row;
    width: 100%;
    flex: 1;
    position: relative;
    z-index: 1;
}

/* Left column container */
.leftColumn {
    width: 50%;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
}

/* Right column container */
.rightColumn {
    width: 50%;
    display: flex;
    flex-direction: column;
    align-items: flex-end;
}

/* Subtype selection container */
.subtypeSelection {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-2);
    width: 100%;
    flex: 0 0 auto;
    padding: 0;
}

/* Action subtype buttons are left-aligned */
.leftColumn .subtypeSelection {
    align-items: flex-start;
    padding-left: 8px; /* Match parent padding */
}

/* Sense subtype buttons are right-aligned */
.rightColumn .subtypeSelection {
    align-items: flex-end;
    padding-right: 8px; /* Match parent padding */
}

/* Subtype button styling */
.subtypeButton {
    background-color: var(--button-default-bg);
    display: flex;
    align-items: center;
    gap: var(--spacing-2);
    border: var(--border-width-standard) solid var(--button-default-border);
    border-radius: var(--radius-md);
    color: var(--button-default-text);
    font-family: var(--font-family-active);
    font-size: var(--font-size-base);
    padding: var(--spacing-2) var(--spacing-4);
    cursor: pointer;
    transition: all var(--transition-normal);
    text-transform: uppercase;
    width: calc(100% - 16px);
    transform: var(--button-scale-default);
    transform-origin: center;
    margin: 0; /* Remove margin from buttons */
}

/* Icon within subtype buttons */
.subtypeButton .icon {
    width: calc(var(--font-size-base) * 1.5);
    height: calc(var(--font-size-base) * 1.5);
    display: flex;
    align-items: center;
    justify-content: center;
}

.flippedVertically {
    transform: scaleY(-1);
}

.commandIcon {
    width: calc(var(--font-size-base) * 1.5);
    height: calc(var(--font-size-base) * 1.5);
}

/* Text justification in buttons */
.leftColumn .subtypeButton {
    justify-content: flex-start;
}

.rightColumn .subtypeButton {
    justify-content: flex-end;
}

.subtypeButton:hover:not(.active) {
    transform: var(--button-scale-hover);
}

.subtypeButton:active:not(.active) {
    transform: var(--button-scale-active);
}

.subtypeButton.active {
    border-color: var(--button-selected-border);
    color: var(--button-selected-text);
    box-shadow: var(--glow-secondary);
}

/* Dashboard container */
.dashboardContainer {
    flex: 0 0 auto;
    position: relative;
    z-index: 1;
    overflow: auto;
    border-radius: var(--radius-md);
    border: none;
    background-color: var(--color-background);
    margin-top: var(--spacing-1);
    display: flex;
    flex-direction: column;
    width: 100%;
}

/* Placeholder for dashboard */
.dashboardPlaceholder {
    width: 100%;
    height: 1px;
    visibility: hidden;
}

/* Status panel at the bottom */
.statusPanel {
    margin-top: auto;
    background-color: var(--color-background);
    color: var(--color-text);
    padding: var(--spacing-3);
    border-radius: var(--radius-md);
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.statusText {
    font-size: var(--font-size-base);
}

.audioIcon {
    color: var(--color-primary-main);
    cursor: pointer;
    transition: transform var(--transition-normal);
    transform: var(--button-scale-default);
}

.audioIcon:hover {
    transform: var(--button-scale-hover);
}

.audioIcon:active {
    transform: var(--button-scale-active);
}

.saveIndicator {
    position: absolute;
    top: var(--spacing-3);
    right: var(--spacing-3);
    display: flex;
    align-items: center;
    z-index: 2;
}

.savedState,
.unsavedState {
    display: flex;
    align-items: center;
    padding: var(--spacing-1);
    border-radius: var(--radius-md);
}

.checkIcon {
    color: var(--color-secondary-main);
    animation: pulse 2s infinite;
}

@keyframes pulse {
    0% {
        opacity: 0.7;
    }
    50% {
        opacity: 1;
    }
    100% {
        opacity: 0.7;
    }
}

.plusIcon {
    color: var(--color-gray-medium);
    animation: blink 1s infinite;
}

@keyframes blink {
    0%,
    100% {
        opacity: 0.5;
    }
    50% {
        opacity: 1;
    }
}

/* In FunctionDefault.module.css */
.stopStepIndicator {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: var(--spacing-6);
    height: 100%;
}

.stopIcon {
    color: var(--color-error-main);
    animation: pulse 2s infinite;
    flex: 0.25;
    align-content: flex-end;
}

.stopText {
    color: var(--panel-text);
    font-family: var(--font-family-active);
    font-size: var(--font-size-xl);
    text-transform: uppercase;
    letter-spacing: var(--letter-spacing-wider);
    flex: 0.75;
    align-content: flex-start;
}

/* Add these CSS rules to wildcatweb/src/features/commandPanel/styles/FunctionDefault.module.css */

/* Confirmation system styles */
.confirmationContainer {
    display: flex;
    justify-content: flex-end;
    padding: var(--spacing-4);
    margin-top: var(--spacing-2);
}

.confirmButton {
    border: none;
    border-radius: var(--radius-md);
    padding: var(--spacing-2) var(--spacing-4);
    font-family: var(--font-family-active);
    font-size: var(--font-size-base);
    font-weight: var(--font-weight-medium);
    cursor: pointer;
    text-transform: uppercase;
    letter-spacing: var(--letter-spacing-wide);
    transition: all var(--transition-normal);
    transform: var(--button-scale-default);
    min-width: calc(var(--spacing-20));
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--spacing-2);
}

.confirmButtonEnabled {
    background-color: var(--color-secondary-main);
    color: var(--color-secondary-contrast);
}

.confirmButtonEnabled:hover:not(:disabled) {
    transform: var(--button-scale-hover);
    background-color: var(--color-secondary-high);
}

.confirmButtonEnabled:active:not(:disabled) {
    transform: var(--button-scale-active);
}

.confirmButtonDisabled {
    background-color: var(--color-gray-medium);
    color: var(--color-background);
    cursor: not-allowed;
    opacity: 0.7;
}

/* Edit button styling - uses secondary (green) colors to match editing theme */
.editButton {
    background-color: var(--color-secondary-main);
    color: var(--color-secondary-contrast);
    border: var(--border-width-standard) solid var(--color-secondary-main);
}

.editButton:hover:not(:disabled) {
    transform: var(--button-scale-hover);
    background-color: var(--color-secondary-high);
    border-color: var(--color-secondary-high);
    box-shadow: var(--glow-secondary);
}

.editButton:active:not(:disabled) {
    transform: var(--button-scale-active);
}

.editButton:focus {
    outline: var(--border-width-standard) solid var(--color-secondary-high);
    outline-offset: var(--spacing-1);
}

/* Button icon styling - consistent with RunMenu pattern */
.buttonIcon {
    width: calc(var(--font-size-base) * 1.2);
    height: calc(var(--font-size-base) * 1.2);
    flex-shrink: 0;
}

/* Spacer elements to maintain layout when selectors are hidden in viewing mode */
.typeSelectorSpacer {
    /* Match the height and spacing of the actionSenseButtonGroup */
    height: calc(
        var(--font-size-base) + calc(var(--spacing-3) * 2) + 16px
    ); /* padding + button height + container padding */
    width: 100%;
    margin-bottom: 0;
    visibility: hidden; /* Takes up space but invisible */
}

.contentSpacer {
    /* Match the typical height of the content container */
    height: calc(var(--spacing-16) * 4); /* Approximate content area height */
    width: 100%;
    flex: 1;
    visibility: hidden; /* Takes up space but invisible */
}
